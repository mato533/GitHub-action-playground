# Lint/Test はpull オープン時オープン時
name: Check for pull request
on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
  

concurrency:
  group: check-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GH_EMAIL: '41898282+github-actions[bot]@users.noreply.github.com'
  GH_USER: 'github-actions[bot]'

jobs:
  check_wip:
    name: check_wip
    uses: ./.github/workflows/wip_check.yml
          
  lint:
    # if: ${{ !contains( github.event.commits.message, 'wip:') }}
    name: lint
    needs:
      - check_wip
    if: ${{ needs.check_wip.outputs.is_wip == 0 }}
    runs-on: ubuntu-latest
    outputs:
      is_release: ${{ steps.check_changes.outputs.is_changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 2
      
          
      - name: lint
        run: |
          cat <<EOF>>ci.log
          # ========
          ${{ github.event.pull_request.commits }}
          EOF

      - name: Set Github user informations.
        run: |
          git config --local user.email "${{ env.GH_EMAIL }}"
          git config --local user.name "${{ env.GH_USER }}"

      - name: Check if there are any changes
        id: check_changes
        run: |
          VAR_NAME="is_changed"
          git add -N .
          if git diff --exit-code --quiet; then
            echo "No changes detected."
            echo "${VAR_NAME}=0" >>"${GITHUB_OUTPUT}"
          else
            echo "Changes detected."
            echo "${VAR_NAME}=1" >>"${GITHUB_OUTPUT}"
          fi


      - name: Commit & push
        if: ${{ steps.check_changes.outputs.is_changed > 0 }}
        run: |
          git add .
          git commit -m "style: format and lint source codes"
          git push

  get_version:
    name: get version
    if: ${{ startsWith(github.head_ref, 'release/') }}
    uses: ./.github/workflows/version.yml

  prepare:
    # プルリク作った時、package.jsonが更新されてるか確認したい。
    name: Release check
    #if: github.repository == 'mato533/rollup-plugin-gas'
    needs:
      - check_wip
      - get_version
    if: ${{ startsWith(github.head_ref, 'release/') && (needs.check_wip.outputs.is_wip == 0) }}
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check the version
        id: check-diff-version
        run: |
          
          DIFF_COUNT="$(git diff origin/main --relative package.json |grep '"version":'|wc -l)"
          VAR_NAME="is_update_version"
          if [ ${DIFF_COUNT} -eq 2 ]; then
            echo "Detected to have updated the version in package.json"
            echo "${VAR_NAME}=1" >>"${GITHUB_OUTPUT}"
          else
            echo "The version in package.json is not updated"
            echo "${VAR_NAME}=0" >>"${GITHUB_OUTPUT}"
          fi

      - name: check branch
        id: check-branch
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          APP_VERSION_TEXT=${BRANCH_NAME##*/}
          APP_VERSION="$(echo "${APP_VERSION_TEXT}"| grep -o -E "([0-9]+\.){1}[0-9]+(\.[0-9]+)?")"
          echo "app_version_text=${APP_VERSION_TEXT}" >>"${GITHUB_OUTPUT}"
          echo "app_version=${APP_VERSION}" >>"${GITHUB_OUTPUT}"
          VAR_NAME="is_error_package_json"
          if [ "${APP_VERSION_TEXT}" = "${{ needs.get_version.outputs.app_version_text }}" ]; then
            echo "Branch name and package.json are consistent"
            echo "  from branch name  : ${APP_VERSION_TEXT}"
            echo "  from package.json : ${{ needs.get_version.outputs.app_version_text }}"
            echo "${VAR_NAME}=0" >>"${GITHUB_OUTPUT}"
          else
            echo "Branch name and package.json are inconsistent"
            echo "  from branch name  : ${APP_VERSION_TEXT}"
            echo "  from package.json : ${{ needs.get_version.outputs.app_version_text }}"
            echo "${VAR_NAME}=1" >>"${GITHUB_OUTPUT}"
          fi
      - name: update pr (inconsistent)
        if: ${{ steps.check-branch.outputs.is_error_package_json > 0 }}
        run: |
          COMMENT_FILE="pull_request_comment"
          cat<<EOF >"${COMMENT_FILE}"
          Please update package.json
            release version: ${{ steps.check-branch.outputs.app_version}}
            package.json   : ${{ needs.get_version.outputs.app_version }}
          EOF
          URL="${{ github.event.pull_request.html_url }}"
          gh pr comment --edit-last -F "${COMMENT_FILE}" "${URL}" || gh pr comment -F "${COMMENT_FILE}" "${URL}" 
      - name: update pr (consistent)
        if: ${{ steps.check-branch.outputs.is_error_package_json == 0 }}
        run: |
          COMMENT_FILE="pull_request_comment"
          cat<<EOF >"${COMMENT_FILE}"
          Ready to release.
            release version: ${{ steps.check-branch.outputs.app_version}}
            package.json   : ${{ needs.get_version.outputs.app_version }}
          EOF
          URL="${{ github.event.pull_request.html_url }}"
          gh pr comment --edit-last -F "${COMMENT_FILE}" "${URL}" || gh pr comment -F "${COMMENT_FILE}" "${URL}" 